import java.math.BigInteger;
import java.security.SecureRandom;

/**
 * <h1>DHE</h1>
 * <p>This class implements a basic form of the original Diffie-Hellman key exchange protocol.</p>
 */
public class DHE {
    /**
     * <h3>generator</h3>
     * <p>Member variable for the generator parameter.</p>
     * <p><b>Do not leave this public</b></p>
     */
    private BigInteger generator;
    
    /**
     * <h3>prime</h3>
     * <p>Member variable for the prime parameter.</p>
     * <p><b>Do not leave this public</b></p>
     */
    private final BigInteger prime;
    
    // Secure random generator for cryptographic operations
    private final SecureRandom secureRandom;
    
    /**
     * <h3>DHE Constructor</h3>
     * <p>The constructor for the DHE class.</p>
     * <p>Accepts int values gBits and pBits to specify the bit widths of the relevant parameters.</p>
     * <p>These values should be generated securely using the methods provided in the Crypto class and stored in the corresponding member variables.</p>
     * @param gBits The number of bits (bit width) to target for the generator
     * @param pBits The number of bits to target for the prime modulus
     */
    public DHE(int gBits, int pBits) {
        secureRandom = new SecureRandom();
        
        // Generate a secure prime number with the specified bit length
        prime = BigInteger.probablePrime(pBits, secureRandom);
        
        // Generate a generator with the specified bit length
        // For simplicity, a common value for generator is 2, 3, or 5
        // But we'll generate a random one within the given bit constraints
        generator = new BigInteger(gBits, secureRandom);
        
        // Ensure generator is less than prime
        generator = generator.mod(prime);
        
        // Avoid generator = 0 or 1
        if (generator.equals(BigInteger.ZERO) || generator.equals(BigInteger.ONE)) {
            generator = BigInteger.valueOf(2); // Default to 2 in these cases
        }
    }
    
    /**
     * <h3>getBase</h3>
     * <p>Accepts an int specifying the target bit width for a base (a, b, etc) and returns a valid base.</p>
     * @param bits The number of bits to target for the base
     * @return The generated base value
     */
    public BigInteger getBase(int bits) {
        // Generate a random number with the specified bit length
        BigInteger base = new BigInteger(bits, secureRandom);
        
        // Ensure the base is within the valid range (1 < base < p-1)
        if (base.compareTo(BigInteger.ONE) <= 0) {
            base = BigInteger.valueOf(2); // Default to 2 if too small
        }
        
        if (base.compareTo(prime.subtract(BigInteger.ONE)) >= 0) {
            base = base.mod(prime.subtract(BigInteger.ONE));
            if (base.equals(BigInteger.ZERO)) {
                base = BigInteger.valueOf(2); // Avoid base = 0
            }
        }
        
        return base;
    }
    
    /**
     * <h3>getExponent</h3>
     * <p>Accepts a base generated by a getBase() call and generates an exponent value (A, B, etc).</p>
     * @param base The base to use for the exponentiation
     * @return The result of g^b mod p using our fast modular exponentiation method
     */
    public BigInteger getExponent(BigInteger base) {
        // A = g^a mod p
        // B = g^b mod p
        return generator.modPow(base, prime);
    }
    
    /**
     * <h3>getKey</h3>
     * <p>Accepts a base and exponent (eg a, B or b, A) and computes the resulting key.</p>
     * @param base The base to use
     * @param exponent The exponent to use
     * @return The result of E^b mod p using our fast modular exponentiation method
     */
    public BigInteger getKey(BigInteger base, BigInteger exponent) {
        // Key = B^a mod p = A^b mod p
        return exponent.modPow(base, prime);
    }
    
    /**
     * Getter for the generator
     * @return The generator value
     */
    public BigInteger getGenerator() {
        return generator;
    }
    
    /**
     * Getter for the prime
     * @return The prime value
     */
    public BigInteger getPrime() {
        return prime;
    }
    
    /**
     * <h3>main</h3>
     * <p><b>For testing purposes only.</b></p>
     * <p>Final submission should be a <b>safe</b> class implementation</p>
     */
    public static void main(String[] args) {
        DHE d = new DHE(512, 2048);
        System.out.printf("g = %s%np = %s%n%n", d.getGenerator(), d.getPrime());
        
        BigInteger a = d.getBase(512);
        BigInteger b = d.getBase(512);
        System.out.printf("a = %s%nb = %s%n%n", a, b);
        
        BigInteger A = d.getExponent(a);
        BigInteger B = d.getExponent(b);
        System.out.printf("A = %s%nB = %s%n%n", A, B);
        
        BigInteger aKey = d.getKey(a, B);
        BigInteger bKey = d.getKey(b, A);
        System.out.printf("keys = %s%n%s", aKey, bKey);
        
        DHE e = new DHE(512, 2048);
        System.out.printf("g = %s%np = %s%n%n", e.getGenerator(), e.getPrime());
        
        BigInteger x = e.getBase(512);
        BigInteger y = e.getBase(512);
        BigInteger z = e.getBase(512);
        System.out.printf("x = %s%ny = %s%nz = %s%n%n", x, y, z);
        
        BigInteger X = e.getExponent(x);
        BigInteger Y = e.getExponent(y);
        BigInteger Z = e.getExponent(z);
        System.out.printf("X = %s%nY = %s%nZ = %s%n%n", X, Y, Z);
        
        BigInteger xKey = e.getKey(x, e.getKey(y, Z));
        BigInteger yKey = e.getKey(y, e.getKey(z, X));
        BigInteger zKey = e.getKey(z, e.getKey(x, Y));
        System.out.printf("keys = %s%n%s%n%s", xKey, yKey, zKey);
    }
}